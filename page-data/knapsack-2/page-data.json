{"componentChunkName":"component---src-templates-blog-template-js","path":"/knapsack-2/","result":{"data":{"cur":{"id":"2354aba5-b99e-5017-bbba-717ab31b1f8a","html":"<h2 id=\"branch-and-bound\" style=\"position:relative;\"><a href=\"#branch-and-bound\" aria-label=\"branch and bound permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Branch and Bound?</h2>\n<p>Branch(가지)와 Bound(범위)를 이용한 방법으로 최적의 해를 찾기 위해 어느 정도의 범위를 정해두고 범위를 벗어난 값들을 가지치기 하는 방법을 의미한다.</p>\n<p>BFS를 이용해 뎁스를 늘려가며 최선의 값을 찾는다고 했을 때 모든 리프까지 가지 않고 어느정도의 바운더리를 정하고 바운더리 밖에 있는 친구들을 제하는 방법을 의미한다.</p>\n<h3 id=\"knapsack에-어떻게-적용해\" style=\"position:relative;\"><a href=\"#knapsack%EC%97%90-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%81%EC%9A%A9%ED%95%B4\" aria-label=\"knapsack에 어떻게 적용해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Knapsack에 어떻게 적용해?</h3>\n<ul>\n<li>각 원소를 넣는 경우와 안 넣는 경우로 두 경우로 가지(Branch)를 쳐가는데</li>\n<li>현재 원소의 최대치로 넣었을 때의 경우(bound)가 현재 찾은 최대 가치(max_benefit)을 넘지 못하면 더 이상 볼 가치가 없는 친구이므로 더이상 뻗지 않는다.(queue에서 넣지 않는다.)</li>\n<li>여기서 queue를 priority queue로 하면 맥스 근처 값을 더 빨리 찾을 수 있기 때문에 가치가 없는 친구들을 더 많이 걸러낼 수 있다!</li>\n</ul>\n<p>가치가 없다고 여기는 경우는 두가지이다.</p>\n<ol>\n<li>bound &#x3C;= max_benefit (이 가지로 뻗쳤을 때 최대 기대가치가 현재 맥스보다 작을때 pass)</li>\n<li>weight > W (현재 아이템을 넣으면 냅색 용량이 최가된다면 pass)</li>\n</ol>\n<p>그렇다면 코드를 한번 보자</p>\n<p><strong>Branch and Bound 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">NodeStruct</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> benefit<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> bound<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Node<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_SIZE</span> <span class=\"token expression\"><span class=\"token number\">10000</span></span></span>\n\nNode heap<span class=\"token punctuation\">[</span>MAX_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">heap_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">heap_swap</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> Node <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Node value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> MAX_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    heap<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> current <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound <span class=\"token operator\">></span> heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">heap_swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heap<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        current <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n        parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nNode <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Node temp<span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>benefit <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    Node ret <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n    heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> leftChild <span class=\"token operator\">=</span> current <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rightChild <span class=\"token operator\">=</span> current <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> maxNode <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftChild <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>maxNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>leftChild<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxNode <span class=\"token operator\">=</span> leftChild<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightChild <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>maxNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>rightChild<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxNode <span class=\"token operator\">=</span> rightChild<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxNode <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">heap_swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>heap<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>heap<span class=\"token punctuation\">[</span>maxNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> maxNode<span class=\"token punctuation\">;</span>\n            leftChild <span class=\"token operator\">=</span> current <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            rightChild <span class=\"token operator\">=</span> current <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">float</span> <span class=\"token function\">bandb</span><span class=\"token punctuation\">(</span>Item<span class=\"token operator\">*</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">heap_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> max_benefit <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> weight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//queue 사이즈 할당해주기</span>\n    Node root<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//root node 넣어줘</span>\n    root<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>benefit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>weight<span class=\"token operator\">+</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            root<span class=\"token punctuation\">.</span>bound <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">-</span>weight<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            root<span class=\"token punctuation\">.</span>bound <span class=\"token operator\">+=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit<span class=\"token punctuation\">;</span>\n            weight <span class=\"token operator\">+=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//q에서 꺼낸 원소가 -1이 아니라면 반복</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Node temp <span class=\"token operator\">=</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Node child<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>benefit <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>bound <span class=\"token operator\">&lt;</span> max_benefit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>index <span class=\"token operator\">==</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n        child<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> array<span class=\"token punctuation\">[</span>index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n        child<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>benefit <span class=\"token operator\">+</span> array<span class=\"token punctuation\">[</span>index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit<span class=\"token punctuation\">;</span>\n        child<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n        child<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>benefit<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//넣기로 하고 하나는 안넣기로해서 두번 작업해</span>\n        <span class=\"token comment\">//꺼낸 원소의 weight과 w를 비교해서 넘으면 continue</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n            child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound <span class=\"token operator\">=</span> child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>w <span class=\"token operator\">&lt;</span> child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//꺼낸 원소의 bound를 구하고</span>\n            weight <span class=\"token operator\">=</span> child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>weight<span class=\"token operator\">+</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>w<span class=\"token operator\">-</span>weight<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound <span class=\"token operator\">+=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit<span class=\"token punctuation\">;</span>\n                    weight <span class=\"token operator\">+=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//max_benefit보다 작으면 continue</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bound <span class=\"token operator\">&lt;</span> max_benefit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//benefit을 구하고 max_benefit 보다 크면 max_benefit 업데이트</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit <span class=\"token operator\">></span> max_benefit<span class=\"token punctuation\">)</span>max_benefit <span class=\"token operator\">=</span> child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//push 해줘</span>\n            <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//다돌았으면 결과 리턴해</span>\n    <span class=\"token keyword\">return</span> max_benefit<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Heap을 구현해서 사용했다.</li>\n<li>최초 root 값을 만들어서 넣어준다.</li>\n<li>heap에서 하나씩 꺼내서 child를 만들어서 heap에 넣어주기를 반복한다.</li>\n<li>바운드를 통과한 친구들만 heap에 들어간다.</li>\n</ul>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<ul>\n<li>진짜 코딩의 방법은 말도 안되게 다양하다.</li>\n<li>처음에 그냥 queue를 썼다가 유진이 말듣고 heap으로 바꿨는데 시간 차이가 말도 안되게 많이 난다.</li>\n<li>진짜… 다음에는 힙도 공부해본다.. 세상에는 다양한 방법이 존재한다 정말루 아직 멀었다.</li>\n</ul>","excerpt":"Branch and Bound? Branch(가지)와 Bound(범위)를 이용한 방법으로 최적의 해를 찾기 위해 어느 정도의 범위를 정해두고 범위를 벗어난 값들을 가지치기 하는 방법을 의미한다. BFS를 이용해 뎁스를 늘려가며 최선의 값을 찾는다고 했을 때 모든 리프까지 가지 않고 어느정도의 바운더리를 정하고 바운더리 밖에 있는 친구들을 제하는 방법을 의미한다. Knapsack에 어떻게 적용해? 각 원소를 넣는 경우와 안 넣는 경우로 두 경우로 가지(Branch)를 쳐가는데 현재 원소의 최대치로 넣었을 때의 경우(bound)가 현재 찾은 최대 가치(max_benefit)을 넘지 못하면 더 이상 볼 가치가 없는 친구이므로 더이상 뻗지 않는다.(queue에서 넣지 않는다.) 여기서 queue를 priority queue로 하면 맥스 근처 값을 더 빨리 찾을 수 있기 때문에 가치가 없는 친구들을 더 많이 걸러낼 수 있다! 가치가 없다고 여기는 경우는 두가지이다. bound <= max_…","frontmatter":{"date":"April 20, 2019","title":"(알고리즘) Knapsack 알고리즘 2 Branch and Bound, Heap + 코드","categories":"알고리즘","author":"정진혁","emoji":"💪"},"fields":{"slug":"/knapsack-2/"}},"next":{"id":"ff7da251-7693-5ea7-a582-faf12d70a1d2","html":"<h2 id=\"knapsack-문제란\" style=\"position:relative;\"><a href=\"#knapsack-%EB%AC%B8%EC%A0%9C%EB%9E%80\" aria-label=\"knapsack 문제란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Knapsack 문제란?</h2>\n<p>배낭에 담을 수 있는 무게의 최댓값이 정해져 있고, <strong>일정 가치와 무게가 있는 짐들을 배낭에 넣을 때,</strong>\n<strong>가치의 합이 최대가 되도록 짐을 고르는 방법을 찾는 문제를 말한다.</strong></p>\n<p>크게 두가지 종류의 문제로 나뉘는데</p>\n<ul>\n<li>물건을 쪼갤 수 있다면 Fractional Knapsack Problem</li>\n<li>물건을 쪼갤 수 없다면 0-1 Knapsack Problem 이라고 한다.</li>\n</ul>\n<p><strong>모든 문제에서 일단 item이라는 struct를 사용했다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">item</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> benefit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"쪼갤-수-있다면-greedy\" style=\"position:relative;\"><a href=\"#%EC%AA%BC%EA%B0%A4-%EC%88%98-%EC%9E%88%EB%8B%A4%EB%A9%B4-greedy\" aria-label=\"쪼갤 수 있다면 greedy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쪼갤 수 있다면? (Greedy)</h2>\n<ul>\n<li>만일 쪼갤 수 있다면 말그대로 가치( <strong>value/weight</strong> )가 제일 높은 애들을 최대한 담고</li>\n<li>공간이 부족하다면 하나를 쪼개서 부분적으로 넣고 끝내면 된다.</li>\n</ul>\n<p>즉, 제일 좋은 것을 취해가는 <strong>Greedy Algorithm</strong>을 이용하면 된다.</p>\n<p><strong>Greedy Algorithm 활용 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">greedy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">item</span><span class=\"token operator\">*</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d번째 benefit: %d, weight: %d, v/w: %f\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> benefit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//만약 원소가 넘겨버리면 쪼개서 넣어</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            benefit <span class=\"token operator\">+=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> left<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//안넘기면 다 넣어</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            left <span class=\"token operator\">-=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n            benefit <span class=\"token operator\">+=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"best benefit : %f\\n\"</span><span class=\"token punctuation\">,</span> benefit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"0-1-knapsack-problem\" style=\"position:relative;\"><a href=\"#0-1-knapsack-problem\" aria-label=\"0 1 knapsack problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0-1 Knapsack Problem</h2>\n<p><strong>DP 되나?</strong></p>\n<ul>\n<li>Subproblem으로 문제를 쪼개서 부분의 답이 전체의 답이 되는지를 먼저 확인해보자</li>\n<li>만일 Max weight이 20이고</li>\n<li>원소(무게, 가치)가 각각 (2, 3), (3, 4), (4, 5), (5, 8), (9, 10)이라고 했을 때</li>\n<li>1번 원소부터 4번 원소까지의 최적의 해는 <strong>모든 원소를 챙긴 경우</strong>로 weight이 14이고 max benefit은 20이다.</li>\n<li>하지만 1~5번 원소까지로 보면 1, 3, 4, 5번 원소를 더한 경우로 weight가 20이고 max benefit은 26이다.</li>\n<li><strong>즉, subproblem의 solution이 전체 문제 solution의 부분이 아니다.</strong></li>\n</ul>\n<p>다른 접근이 필요하다.</p>\n<p><strong>Redefine DP problem</strong></p>\n<ul>\n<li>이번에는 가로를 n(원소갯수), 세로를 W(냅색 무게)로 하는 어레이를 준비한다.</li>\n<li>냅색 무게를 조금씩 채워가면서 해당 무게 일 때 가장 최선의 방법을 찾아서 그것을 적어 놓는다.</li>\n<li>그렇게 weight를 기준으로 Subproblem을 찾아나가다 보면 제일 최적의 경우를 발견해 나갈 수 있다.</li>\n</ul>\n<p><strong>Recursive Formula for subproblems</strong></p>\n<ul>\n<li>만약 지금 인덱스의 weight가 subproblem의 weight보다 크다면 그 원소를 넣기 이전 값을 넣어준다.</li>\n<li>그 외의 경우에는 지금 원소를 넣었을 때의 가치와 이전 가치를 비교해서 더 높은 것을 넣어준다.</li>\n</ul>\n<p><strong>DP 활용 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">item</span><span class=\"token operator\">*</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> B<span class=\"token punctuation\">;</span>\n    B <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span>W <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> W<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>B<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;</span> W<span class=\"token punctuation\">;</span> w<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> _w <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> _b <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>benefit<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_w <span class=\"token operator\">&lt;=</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_b<span class=\"token operator\">+</span>B<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token operator\">-</span>_w<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>B<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _b<span class=\"token operator\">+</span>B<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token operator\">-</span>_w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"best benefit : %d\\n\"</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>W<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>Line 6: index가 0인 원소는 없기 때문에 해당 칸을 0으로 채워준다. (원소는 1~n까지 있다)</li>\n<li>Line 8: 무게가 0인 곳에는 아무 원소도 못들어가기 때문에 0으로 채워준다.</li>\n<li>Line 12: 해당 index의 weight(_w)이 현재 subproblem의 weight(w)보다 작으면</li>\n<li>Line 13: 현재 index의 value(_b)에 현재 subproblem에서 현재 index의 무게를 뺀 곳의 benefit을 더한게 i-1의 값보다 크다면 그 값을 넣어줘라.</li>\n<li>Line 14: 현재 인덱스 꺼를 넣어준 값이 시원찮으면 걍 바로 i-1의 값을 넣어줘라.</li>\n<li>Line 15: 현재 index의 weight가 subproblem의 weight보다 크면 못들어가니까 그냥 i-1의 값과 동일하게 해줘라.</li>\n<li>Line 20: 제일 좋은 값은 B[n][W-1]에 있게 된다.</li>\n</ul>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<ul>\n<li>DP에는 진짜 subproblem의 정의하는 것이 중요하다.</li>\n<li>아직 나는 능력치가 부족해서 잘 못하지만 계속 노력하다보면 할 수 있게 될 것 같다.</li>\n<li>시험기간이지만 일단 코딩 화이팅하자:)</li>\n</ul>","frontmatter":{"date":"April 11, 2019","title":"(알고리즘) Knapsack 알고리즘 Greedy, DP + 코드","categories":"알고리즘","author":"정진혁","emoji":"💪"},"fields":{"slug":"/knapsack-1/"}},"prev":{"id":"fab0280a-6e11-59be-92dc-6b6e0e219636","html":"<h2 id=\"shortest-path\" style=\"position:relative;\"><a href=\"#shortest-path\" aria-label=\"shortest path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shortest Path</h2>\n<p>최단경로를 찾는 문제의 특징은 다음과 같다.</p>\n<ul>\n<li>Input : directed graph G = (V, E) with weight function w : E -> R</li>\n<li>S에서 D까지의 minimum weight을 가지는 path를 찾는 문제이다.</li>\n<li>Weight w(p) of path p : p로 가는 길에 있는 모든 edge weight의 합이다.</li>\n<li>u부터 v 까지의 shortest-path weight은 다음으로 표현한다</li>\n<li>S(u,v) = if path가 있으면 u부터 v까지 오는 path 중의 min . 없으면 무한대</li>\n</ul>\n<h2 id=\"variants\" style=\"position:relative;\"><a href=\"#variants\" aria-label=\"variants permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variants</h2>\n<p>최단거리를 찾는 문제는 크게 4종류가 있다.</p>\n<ol>\n<li>Single-source shortest path : 하나의 S에서 모든 vertex까지 최단거리</li>\n<li>Single-destinations : 모든 vertex에서 하나의 D까지의 최단거리</li>\n<li>Single-pair : 하나의 S로 부터 모든 하나의 D까지의 최단거리</li>\n<li>All-pair : 모든 vertex의 서로간의 최단거리</li>\n</ol>\n<p>1~3번 : Bellman-Ford, DAG, Dijkstara 알고리즘\n4번 : Floyd 알고리즘</p>\n<h2 id=\"문제-특징\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%8A%B9%EC%A7%95\" aria-label=\"문제 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 특징</h2>\n<ul>\n<li>Optimal substructure이 존재한다! 그러므로 Greedy Algorithm으로 접근 가능!</li>\n<li>Negative Cycle이 존재하면 절대 안돼! 왜냐하면 그럼 그 Cycle을 계속 돌면서 음의 무한대로 값이 떨어질 것이기 때문이다!</li>\n</ul>\n<h3 id=\"shortest-path란\" style=\"position:relative;\"><a href=\"#shortest-path%EB%9E%80\" aria-label=\"shortest path란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shortest path란?</h3>\n<p>S(u,v) &#x3C;= S(u,x) + S(x, v) 이다.\n즉, 한번 거쳐가는 게 무조건 크거나 같다.</p>\n<p>Shortest path는 Cycle이 없다.</p>\n<h2 id=\"single-source-shortest-path\" style=\"position:relative;\"><a href=\"#single-source-shortest-path\" aria-label=\"single source shortest path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Source Shortest Path</h2>\n<p>먼저 하나의 Source를 가지는 문제를 풀어보자.</p>\n<ul>\n<li>1개의 s에 대해서 모든 vertex v로 가는 최단경로를 찾는 문제이다.</li>\n<li>d[v] = S[s, v]를 의미</li>\n<li>초기에 d[v]는 무한대인데 알고리즘을 돌면서 값이 줄어들 것이다.</li>\n<li>p[v] = 바로 이전 vertex를 의미한다.</li>\n<li>p를 이용해서 shortest-path tree를 만들 수 있다.</li>\n</ul>\n<p>그럼 이번에는 코드를 봐보자</p>\n<h2 id=\"초기화-코드\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%ED%99%94-%EC%BD%94%EB%93%9C\" aria-label=\"초기화 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기화 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> each v <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> V\n        <span class=\"token keyword\">do</span> d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INFINITE\n            p<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> NIL\n    d<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>\n<p>모든 V에 있는 vertext까지의 거리를 무한대로 만들어주고 P를 초기화해준다.\n그리고 시작점인 s의 거리만 0으로 만들어준다.</p>\n<h2 id=\"relaxation짧은-길-찾기\" style=\"position:relative;\"><a href=\"#relaxation%EC%A7%A7%EC%9D%80-%EA%B8%B8-%EC%B0%BE%EA%B8%B0\" aria-label=\"relaxation짧은 길 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relaxation(짧은 길 찾기)</h2>\n<p>이것이 사실상 핵심이다!! 더 짧은 길이 발견되면 바로 환승하는 과정이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">Relax</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> d<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">)</span>\n        then d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">;</span>\n                p<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>u는 s와 v 사이에 vertex이고 w는 u와 v 사이의 weight이다.</li>\n<li>만일 v까지 현재 최단 경로 d[v]보다 d[u]를 거치고 가는게 더 빠르면 환승한다.</li>\n</ul>\n<h2 id=\"bellman-ford-algorithm\" style=\"position:relative;\"><a href=\"#bellman-ford-algorithm\" aria-label=\"bellman ford algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bellman-Ford algorithm</h2>\n<p>이 알고리즘은 edge weight가 음수여도 할 수 있다.\n그래도 여전히 negative-weight cycle은 안돼!!</p>\n<p>일단 코드를 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">BELLMAN<span class=\"token operator\">-</span><span class=\"token function\">FORD</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1.</span>  INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span>  <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> to <span class=\"token operator\">|</span>V<span class=\"token operator\">|</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token number\">3.</span>      <span class=\"token keyword\">do</span> <span class=\"token keyword\">for</span> each <span class=\"token function\">edge</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> E\n<span class=\"token number\">4.</span>          <span class=\"token keyword\">do</span> <span class=\"token function\">RELAX</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span>\n<span class=\"token number\">5.</span>  <span class=\"token keyword\">for</span> each <span class=\"token function\">edge</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> E\n<span class=\"token number\">6.</span>      <span class=\"token keyword\">do</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> d<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">7.</span>          then <span class=\"token keyword\">return</span> FALSE\n<span class=\"token number\">8.</span>  <span class=\"token keyword\">return</span> TRUE</code></pre></div>\n<ul>\n<li>Line 1 : 초기화</li>\n<li>Line 2 : vertex 수 - 1 번 반복해</li>\n<li>Line 3,4 : edge를 하나씩 꺼내가지고 Relax시켜</li>\n<li>Line 5,6 : 또 edge에서 하나씩 꺼내서 Relax시켜봐</li>\n<li>Line 7,8 : Relax 또 되면 negative cycle이 있는거여 return False</li>\n</ul>\n<p>이 코드는 모든 E를 훑는 과정을 V-1번 반복하기 때문에 시간은 O(VE) 가 걸린다.</p>\n<h2 id=\"in-dagdirected-acycling-graph\" style=\"position:relative;\"><a href=\"#in-dagdirected-acycling-graph\" aria-label=\"in dagdirected acycling graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in DAG(Directed Acycling Graph)</h2>\n<p>사이클이 없다는 전제하에 이 알고리즘을 쓸 수 있다.\nTopological sort를 이용하면 Bellman-Ford의 V-1번 반복하는 과정을 하나로 줄일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">DAG<span class=\"token operator\">-</span>SHORTEST<span class=\"token operator\">-</span><span class=\"token function\">PATHS</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n    topologically sort the vertices\n    INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> each vertex u<span class=\"token punctuation\">,</span> take in topologically sorted order\n        <span class=\"token keyword\">do</span> <span class=\"token keyword\">for</span> each vertex v <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> Adj<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">do</span> <span class=\"token function\">RELAX</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 진행하면 타임이 O(V+E)로 확 줄게 된다!!</p>\n<p>잠깐!! 여기서 Topological Sort 뭔지 정확히 집고 넘어가자.</p>\n<h3 id=\"topological-sort\" style=\"position:relative;\"><a href=\"#topological-sort\" aria-label=\"topological sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Topological Sort</h3>\n<p>DFS를 이용해서 모든 vertex의 Finish Time을 다 구한 다음에 Finish Time이 큰 순서대로 Sorting하는 거를 말한다.</p>\n<p>옷 입는 순서와 같이 앞에 꺼가 끝나지 않으면 일이 진행되지 않을 때 일의 순서를 정하는데 사용된다.</p>\n<h2 id=\"dijkstra-algorithm다익스트라-알고리즘\" style=\"position:relative;\"><a href=\"#dijkstra-algorithm%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"dijkstra algorithm다익스트라 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dijkstra Algorithm(다익스트라 알고리즘)</h2>\n<ul>\n<li>negative edge가 없는 경우에만 사용된다.</li>\n<li>BFS를 이용해서 vertex를 priority queue(pq)에 넣고 tree를 확장해나간다.</li>\n</ul>\n<p>2개의 Vertex set이 존재해서 S는 최종, Q는 vertex가 담겨져있는 pq이다.\nQ에서 하나씩 꺼내기를 반복하면서 최단거리를 찾고 꺼낸 vertex를 S에 넣는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">DIJKSTRA</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1.</span>  INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span>  S <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token constant\">NULL</span>\n<span class=\"token number\">3.</span>  Q <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> V<span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span>\n<span class=\"token number\">4.</span>  <span class=\"token keyword\">while</span> Q <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span>\n<span class=\"token number\">5.</span>  <span class=\"token keyword\">do</span> u <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> EXTRACT<span class=\"token operator\">-</span><span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span>\n<span class=\"token number\">6.</span>      S <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> S <span class=\"token operator\">+</span> U\n<span class=\"token number\">7.</span>      <span class=\"token keyword\">for</span> each vertex v <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> Adj<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span>\n<span class=\"token number\">8.</span>          <span class=\"token keyword\">do</span> <span class=\"token function\">RELAX</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span></code></pre></div>\n<p>즉, pq에서 하나씩 꺼내면서 꺼낸 vertex와 근접한 원소를 relax시켜주고 꺼낸 원소를 S에 넣는다.</p>","frontmatter":{"date":"May 09, 2019","title":"(알고리즘) Shortest Path 찾기 - Bellman-Ford, DAG, Dijkstara 알고리즘","categories":"알고리즘","author":"정진혁","emoji":"💪"},"fields":{"slug":"/shortest-path/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/knapsack-2/","nextSlug":"/knapsack-1/","prevSlug":"/shortest-path/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}