{"componentChunkName":"component---src-templates-blog-template-js","path":"/union-find-2/","result":{"data":{"cur":{"id":"d822db83-0adc-5c1a-b14a-53342c4416db","html":"<h2 id=\"기존-rank-활용-방법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-rank-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"기존 rank 활용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 Rank 활용 방법</h2>\n<ul>\n<li>이전 포스트에서 그림으로 표현했듯이, union과 find를 계속 진행하다보면 worst case에서는 그림과 같이 나오게 된다.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/union-find-2.jpeg\" alt=\"사진\"></p>\n<ul>\n<li>그림과 같이 작은 트리가 큰 트리에 붙는 형식으로 이는 Linked List의 형태를 띄게 된다.</li>\n<li>이것의 시간 복잡도는 O(log n) 만큼 걸리게 된다.</li>\n<li>이를 <strong>union by rank</strong>라고 한다.</li>\n</ul>\n<h2 id=\"path-compression-활용-방법\" style=\"position:relative;\"><a href=\"#path-compression-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"path compression 활용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Path Compression 활용 방법</h2>\n<ul>\n<li>다른 방법이 또 있다면 <strong>path compression</strong>이다.</li>\n<li>이 방법은 find()가 호출될 때 tree를 납짝하게 만드는 것이다.</li>\n<li>find()가 x에 대해서 호출되면 x로부터 root node를 찾기 시작한다.</li>\n<li>찾아서 root node를 반환시켜준다.</li>\n<li>그리고 root node에 이어붙이기 때문에 Rank 활용 때처럼 중간에 있는 친구들을 다 search하지 않아도 된다는 장점이 있다.</li>\n</ul>\n<p><strong>Rank와 Path Compression을 활용하면 기존의 방법보다 훨씬 효율적인 코드를 짤 수 있다!</strong></p>\n<h2 id=\"rank와-path-compression-활용-코드\" style=\"position:relative;\"><a href=\"#rank%EC%99%80-path-compression-%ED%99%9C%EC%9A%A9-%EC%BD%94%EB%93%9C\" aria-label=\"rank와 path compression 활용 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rank와 Path Compression 활용 코드</h2>\n<p>이 코드는 기존 코드에 parent와 rank의 정보를 담고 있는 subset이 추가되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//각 Edge의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> src<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//각 Graph의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span> edge<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//parent와 rank 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Graph를 생성해서 반환해주는 역할을 하는 함수이다.</span>\n<span class=\"token comment\">//V는 vertex 개수, E는 edge의 개수를 의미한다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//그래프 공간 할당!</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 크기를 주어진 정보를 이용해 정해준다.</span>\n    graph<span class=\"token operator\">-></span>V <span class=\"token operator\">=</span> V<span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>E <span class=\"token operator\">=</span> E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 edge 개수만큼 Edge의 공간을 할당해준다.</span>\n    graph<span class=\"token operator\">-></span>edge <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span> graph <span class=\"token operator\">-></span> E <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//만든 그래프를 반환해준다.</span>\n    <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Path compression의 장점을 활용해 root node를 찾아주는 역할을 하는 친구다.</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> subsets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//root node가 아니면 root node 찾을 때까지 recursive하세요.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span>subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span>subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//root node를 반환해주세요.</span>\n    <span class=\"token keyword\">return</span> subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//이번에는 rank를 이용해서 합쳐준다.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> subsets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//각각 root node를 찾아줍니다.</span>\n    <span class=\"token keyword\">int</span> xroot <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> yroot <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//root node의 rank에 따라 누가 밑으로 붙을지 정합니다.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">&lt;</span> subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">)</span> subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> yroot<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">></span> subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">)</span> subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> xroot<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//두개가 같으면 x를 위로 올려주고 x의 root node rank를 하나 더해줍니다.</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> xroot<span class=\"token punctuation\">;</span>\n        subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//Cycle을 확인해주는 함수</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> V <span class=\"token operator\">=</span> graph<span class=\"token operator\">-></span>V<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> E <span class=\"token operator\">=</span> graph<span class=\"token operator\">-></span>E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//subset의 크기를 정해줍니다.</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> <span class=\"token operator\">*</span>subsets <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> V <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//초기 rank를 0으로 또 parent를 자기 자신으로 즉 자기를 rootnode로 설정한다.</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> V<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        subsets<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n        subsets<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//그래프의 Edge를 쭉 훑어봅시다.</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> E<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Edge의 src와 dest node가 같은 graph에 속해있나 봅시다.</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//같으면 Cycle이 있는겁니다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//아니면 두 그래프를 합쳐요!</span>\n        <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> E <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-1</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 1-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 있어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 없어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 과정을 통하면 log n 이 중간에 있는 노드를 더 적게 가므로 더 짧은 log n이 된다! 쉽지 않다…ㅎㅎ</p>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<ul>\n<li>진짜 조금 더 빠르게 할려는 방법을 찾는게 대박이다…</li>\n<li>이제 본격적으로 이거를 그래프 알고리즘에 써먹어봐야겠다.</li>\n</ul>","excerpt":"기존 Rank 활용 방법 이전 포스트에서 그림으로 표현했듯이, union과 find를 계속 진행하다보면 worst case에서는 그림과 같이 나오게 된다. 사진 그림과 같이 작은 트리가 큰 트리에 붙는 형식으로 이는 Linked List의 형태를 띄게 된다. 이것의 시간 복잡도는 O(log n) 만큼 걸리게 된다. 이를 union by rank라고 한다. Path Compression 활용 방법 다른 방법이 또 있다면 path compression이다. 이 방법은 find()가 호출될 때 tree를 납짝하게 만드는 것이다. find()가 x에 대해서 호출되면 x로부터 root node를 찾기 시작한다. 찾아서 root node를 반환시켜준다. 그리고 root node에 이어붙이기 때문에 Rank 활용 때처럼 중간에 있는 친구들을 다 search하지 않아도 된다는 장점이 있다. Rank와 Path Compression을 활용하면 기존의 방법보다 훨씬 효율적인 코드를 짤 수 있다! R…","frontmatter":{"date":"May 19, 2019","title":"(알고리즘) Union Find 알고리즘 강화버전 - Rank, Path Compression 사용","categories":"알고리즘","author":"정진혁","emoji":"💪"},"fields":{"slug":"/union-find-2/"}},"next":{"id":"dee9ed67-7962-5c3f-8a42-e9797f4bcb58","html":"<h2 id=\"disjoint-set-구조와-union-find-알고리즘이란\" style=\"position:relative;\"><a href=\"#disjoint-set-%EA%B5%AC%EC%A1%B0%EC%99%80-union-find-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\" aria-label=\"disjoint set 구조와 union find 알고리즘이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disjoint-set 구조와 Union-Find 알고리즘이란?</h2>\n<ul>\n<li>Disjoint set 이란 연결이 끊어진 원소들의 집합을 의미 한다.</li>\n<li>이 데이터 구조를 위해서 Union-Find 알고리즘이 2가지 주요한 operation을 제공한다.</li>\n</ul>\n<ol>\n<li>Find : 어떤 원소가 어느 집합에 있는지 찾아준다. 주로 두개의 element가 같은 집합에 있는지 확인하는데 사용된다.</li>\n<li>Union : 2개의 집합을 하나의 집합으로 합쳐준다.</li>\n</ol>\n<p><strong>이 알고리즘은 Cycle을 찾는데 아주 용이하다.</strong></p>\n<h2 id=\"union-find의-활용-코드-사이클-찾기\" style=\"position:relative;\"><a href=\"#union-find%EC%9D%98-%ED%99%9C%EC%9A%A9-%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9D%B4%ED%81%B4-%EC%B0%BE%EA%B8%B0\" aria-label=\"union find의 활용 코드 사이클 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union-Find의 활용 코드 (사이클 찾기)</h2>\n<p><img src=\"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/union-find-1.png\" alt=\"사진\"></p>\n<p>위와 같은 그래프 일 때 사이클 여부를 Union-find를 이용해서 확인해보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//각 Edge의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> src<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//각 Graph의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span> edge<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Graph를 생성해서 반환해주는 역할을 하는 함수이다.</span>\n<span class=\"token comment\">//V는 vertex 개수, E는 edge의 개수를 의미한다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//그래프 공간 할당!</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 크기를 주어진 정보를 이용해 정해준다.</span>\n    graph<span class=\"token operator\">-></span>V <span class=\"token operator\">=</span> V<span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>E <span class=\"token operator\">=</span> E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 edge 개수만큼 Edge의 공간을 할당해준다.</span>\n    graph<span class=\"token operator\">-></span>edge <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span> graph <span class=\"token operator\">-></span> E <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//만든 그래프를 반환해준다.</span>\n    <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//해당 vertex가 어느 집합에 속했는지 확인시켜주는 노드이다.</span>\n<span class=\"token comment\">//두개의 vertex가 같은 집합에 있다면 find의 결과 값이 같을 것이다.</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//계속 타고 타고 가서 지금 parent가 없는 친구를 찾아보자(즉 그래프의 child node)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//만약 두개의 child node가 다르다면 두 노드를 이어줍시다. 하나의 그래프가 다른 그래프 밑으로 쏙 들어가게 된다.</span>\n<span class=\"token keyword\">void</span> <span class=\"token keyword\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//둘의 childnode를 찾고 다르면 하나가 다른 하나를 먹자.</span>\n    <span class=\"token keyword\">int</span> xset <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> yset <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xset <span class=\"token operator\">!=</span> yset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        parent<span class=\"token punctuation\">[</span>xset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> yset<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Cycle을 확인해주는 함수</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//parent라는 어레이 변수를 생성하고 초기 값을 -1, 즉 부모가 없는 상태로 두자</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> graph<span class=\"token operator\">-></span>V <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> graph<span class=\"token operator\">-></span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 Edge를 쭉 훑어봅시다.</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token operator\">-></span>E<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Edge의 src와 dest node가 같은 graph에 속해있나 봅시다.</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//같으면 Cycle이 있는겁니다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//아니면 두 그래프를 합쳐요!</span>\n        <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> E <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-1</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 1-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 있어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 없어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>주석을 확인하면 훨씬 이해가 빠를 것이다.</p>\n<h2 id=\"헷갈림-주의\" style=\"position:relative;\"><a href=\"#%ED%97%B7%EA%B0%88%EB%A6%BC-%EC%A3%BC%EC%9D%98\" aria-label=\"헷갈림 주의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헷갈림 주의!!</h2>\n<p>union을 하게 되면 같은 집합에 있는 원소의 child node가 같아지게 된다. 밑에 그림을 참고하자:)</p>\n<p><img src=\"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/union-find-2.jpeg\" alt=\"사진\"></p>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<ul>\n<li>내가 bfs로 짰을 때보다 훨씬 효율적인지는 모르겠지만 일단 굉장히 직관적이다.</li>\n<li>두개의 집합을 합치는 방법도 어떻게 하지 했는데 child node를 이어주는 것 만으로 이것이 가능해다는 발상도 너무 좋다.</li>\n<li>아직 확실히 감은 안오지만 한번 도전해볼만 하다.</li>\n</ul>","frontmatter":{"date":"May 19, 2019","title":"(알고리즘) Disjoint Set 구조와 Union Find 알고리즘","categories":"알고리즘","author":"정진혁","emoji":"💪"},"fields":{"slug":"/union-find/"}},"prev":{"id":"c309a723-daa9-541c-8c9b-3bf680976726","html":"<h2 id=\"minimum-spanning-tree란\" style=\"position:relative;\"><a href=\"#minimum-spanning-tree%EB%9E%80\" aria-label=\"minimum spanning tree란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Minimum Spanning Tree란?</h2>\n<ul>\n<li>Minimum Spanning Tree란 Undirected Graph 내에서 Cycle이 발생하지 않는 한도 내에서 모든 vertex가 연결되있는 tree 중 weight의 합이 가장 작은 tree를 의미한다.</li>\n<li>그렇기 때문에 무조건 Edge의 갯수는 Vertex 갯수 - 1 개이다.</li>\n</ul>\n<h2 id=\"어떻게-찾지\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B0%BE%EC%A7%80\" aria-label=\"어떻게 찾지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 찾지?</h2>\n<ul>\n<li>일단 edge의 set인 A를 만들자</li>\n<li>처음에 A가 빈 상태에서 하나씩 넣은 거다.</li>\n<li>여기서 중요한 것은 <strong>safe edge</strong>만 넣는다.</li>\n<li>Safe Edge란 A가 MST의 subset이라면 A를 추가해도 MST의 subset을 유지할 때의 Edge를 의미한다.</li>\n</ul>\n<h2 id=\"kruskal-알고리즘의-기본-개념\" style=\"position:relative;\"><a href=\"#kruskal-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90\" aria-label=\"kruskal 알고리즘의 기본 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kruskal 알고리즘의 기본 개념</h2>\n<ul>\n<li>일단 Edge를 다 weight가 작은 순으로 나열한다.</li>\n<li>A라는 숲을 유지한 상태에서 safe edge를 찾아서 추가해준다.</li>\n<li>즉 이 알고리즘은 <strong>GREEDDDY</strong>이다!!!</li>\n</ul>\n<h2 id=\"kruskal-알고리즘-스텝\" style=\"position:relative;\"><a href=\"#kruskal-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%8A%A4%ED%85%9D\" aria-label=\"kruskal 알고리즘 스텝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kruskal 알고리즘 스텝</h2>\n<ol>\n<li>edge을 weight 작은 순으로 sorting한다.</li>\n<li>가장 작은 애들을 하나씩 꺼내 cycle이 발생하면 제외, cycle이 안생기면 넣어준다.</li>\n<li>edge 수가 V-1개 가 될 때까지 2번을 반복한다.</li>\n</ol>\n<h2 id=\"kruskal-알고리즘의-방법\" style=\"position:relative;\"><a href=\"#kruskal-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%B0%A9%EB%B2%95\" aria-label=\"kruskal 알고리즘의 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kruskal 알고리즘의 방법</h2>\n<ul>\n<li>일단 source, destination, weight이 담긴 vector를 sorting한다.</li>\n<li>Cycle이 생기는지 여부는 Union Find를 이용해서 찾도록 하자.</li>\n</ul>\n<h2 id=\"pseudo-코드\" style=\"position:relative;\"><a href=\"#pseudo-%EC%BD%94%EB%93%9C\" aria-label=\"pseudo 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pseudo 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">MST<span class=\"token operator\">-</span><span class=\"token function\">Kruskal</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span>\n    R <span class=\"token operator\">=</span> E<span class=\"token punctuation\">;</span>\n    F <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">While</span> <span class=\"token punctuation\">(</span> R is <span class=\"token operator\">not</span> empty<span class=\"token punctuation\">)</span>\n        Remove the light edge<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> from R<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> does <span class=\"token operator\">not</span> make a cycle in F<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> to F<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> F<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"c-코드\" style=\"position:relative;\"><a href=\"#c-%EC%BD%94%EB%93%9C\" aria-label=\"c 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++ 코드</h2>\n<p>프로그래머스 고득점 kit 섬연결 문제 코드를 참고합시다.</p>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<ul>\n<li>솔직히 별로 안어렵다고 생각했는데 Cycle 생기는지 여부구하는거 이해하려고 돌아돌아 Union Find까지 다녀왔다.</li>\n<li>음 일단 많이 배울 수 있음에 감사하고 얼른 써먹어봐야겠다.</li>\n</ul>","frontmatter":{"date":"May 19, 2019","title":"(알고리즘) Minimum Spanning Tree MST 알고리즘 - Kruskal 알고리즘","categories":"알고리즘","author":"정진혁","emoji":"💪"},"fields":{"slug":"/mst/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/union-find-2/","nextSlug":"/union-find/","prevSlug":"/mst/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}