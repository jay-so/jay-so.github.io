{"componentChunkName":"component---src-templates-blog-template-js","path":"/union-find/","result":{"data":{"cur":{"id":"dee9ed67-7962-5c3f-8a42-e9797f4bcb58","html":"<h2 id=\"disjoint-set-구조와-union-find-알고리즘이란\" style=\"position:relative;\"><a href=\"#disjoint-set-%EA%B5%AC%EC%A1%B0%EC%99%80-union-find-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\" aria-label=\"disjoint set 구조와 union find 알고리즘이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disjoint-set 구조와 Union-Find 알고리즘이란?</h2>\n<ul>\n<li>Disjoint set 이란 연결이 끊어진 원소들의 집합을 의미 한다.</li>\n<li>이 데이터 구조를 위해서 Union-Find 알고리즘이 2가지 주요한 operation을 제공한다.</li>\n</ul>\n<ol>\n<li>Find : 어떤 원소가 어느 집합에 있는지 찾아준다. 주로 두개의 element가 같은 집합에 있는지 확인하는데 사용된다.</li>\n<li>Union : 2개의 집합을 하나의 집합으로 합쳐준다.</li>\n</ol>\n<p><strong>이 알고리즘은 Cycle을 찾는데 아주 용이하다.</strong></p>\n<h2 id=\"union-find의-활용-코드-사이클-찾기\" style=\"position:relative;\"><a href=\"#union-find%EC%9D%98-%ED%99%9C%EC%9A%A9-%EC%BD%94%EB%93%9C-%EC%82%AC%EC%9D%B4%ED%81%B4-%EC%B0%BE%EA%B8%B0\" aria-label=\"union find의 활용 코드 사이클 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union-Find의 활용 코드 (사이클 찾기)</h2>\n<p><img src=\"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/union-find-1.png\" alt=\"사진\"></p>\n<p>위와 같은 그래프 일 때 사이클 여부를 Union-find를 이용해서 확인해보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//각 Edge의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> src<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//각 Graph의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span> edge<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Graph를 생성해서 반환해주는 역할을 하는 함수이다.</span>\n<span class=\"token comment\">//V는 vertex 개수, E는 edge의 개수를 의미한다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//그래프 공간 할당!</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 크기를 주어진 정보를 이용해 정해준다.</span>\n    graph<span class=\"token operator\">-></span>V <span class=\"token operator\">=</span> V<span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>E <span class=\"token operator\">=</span> E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 edge 개수만큼 Edge의 공간을 할당해준다.</span>\n    graph<span class=\"token operator\">-></span>edge <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span> graph <span class=\"token operator\">-></span> E <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//만든 그래프를 반환해준다.</span>\n    <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//해당 vertex가 어느 집합에 속했는지 확인시켜주는 노드이다.</span>\n<span class=\"token comment\">//두개의 vertex가 같은 집합에 있다면 find의 결과 값이 같을 것이다.</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//계속 타고 타고 가서 지금 parent가 없는 친구를 찾아보자(즉 그래프의 child node)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//만약 두개의 child node가 다르다면 두 노드를 이어줍시다. 하나의 그래프가 다른 그래프 밑으로 쏙 들어가게 된다.</span>\n<span class=\"token keyword\">void</span> <span class=\"token keyword\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//둘의 childnode를 찾고 다르면 하나가 다른 하나를 먹자.</span>\n    <span class=\"token keyword\">int</span> xset <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> yset <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xset <span class=\"token operator\">!=</span> yset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        parent<span class=\"token punctuation\">[</span>xset<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> yset<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Cycle을 확인해주는 함수</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//parent라는 어레이 변수를 생성하고 초기 값을 -1, 즉 부모가 없는 상태로 두자</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> graph<span class=\"token operator\">-></span>V <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> graph<span class=\"token operator\">-></span>V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 Edge를 쭉 훑어봅시다.</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token operator\">-></span>E<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Edge의 src와 dest node가 같은 graph에 속해있나 봅시다.</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//같으면 Cycle이 있는겁니다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//아니면 두 그래프를 합쳐요!</span>\n        <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> E <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-1</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 1-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 있어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 없어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>주석을 확인하면 훨씬 이해가 빠를 것이다.</p>\n<h2 id=\"헷갈림-주의\" style=\"position:relative;\"><a href=\"#%ED%97%B7%EA%B0%88%EB%A6%BC-%EC%A3%BC%EC%9D%98\" aria-label=\"헷갈림 주의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헷갈림 주의!!</h2>\n<p>union을 하게 되면 같은 집합에 있는 원소의 child node가 같아지게 된다. 밑에 그림을 참고하자:)</p>\n<p><img src=\"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/union-find-2.jpeg\" alt=\"사진\"></p>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<ul>\n<li>내가 bfs로 짰을 때보다 훨씬 효율적인지는 모르겠지만 일단 굉장히 직관적이다.</li>\n<li>두개의 집합을 합치는 방법도 어떻게 하지 했는데 child node를 이어주는 것 만으로 이것이 가능해다는 발상도 너무 좋다.</li>\n<li>아직 확실히 감은 안오지만 한번 도전해볼만 하다.</li>\n</ul>","excerpt":"Disjoint-set 구조와 Union-Find 알고리즘이란? Disjoint set 이란 연결이 끊어진 원소들의 집합을 의미 한다. 이 데이터 구조를 위해서 Union-Find 알고리즘이 2가지 주요한 operation을 제공한다. Find : 어떤 원소가 어느 집합에 있는지 찾아준다. 주로 두개의 element가 같은 집합에 있는지 확인하는데 사용된다. Union : 2개의 집합을 하나의 집합으로 합쳐준다. 이 알고리즘은 Cycle을 찾는데 아주 용이하다. Union-Find의 활용 코드 (사이클 찾기) 사진 위와 같은 그래프 일 때 사이클 여부를 Union-find를 이용해서 확인해보자! 주석을 확인하면 훨씬 이해가 빠를 것이다. 헷갈림 주의!! union을 하게 되면 같은 집합에 있는 원소의 child node가 같아지게 된다. 밑에 그림을 참고하자:) 사진 느낀점 내가 bfs로 짰을 때보다 훨씬 효율적인지는 모르겠지만 일단 굉장히 직관적이다. 두개의 집합을 합치는 방법도…","frontmatter":{"date":"May 19, 2019","title":"(알고리즘) Disjoint Set 구조와 Union Find 알고리즘","categories":"알고리즘","author":"정진혁","emoji":"💪"},"fields":{"slug":"/union-find/"}},"next":{"id":"fab0280a-6e11-59be-92dc-6b6e0e219636","html":"<h2 id=\"shortest-path\" style=\"position:relative;\"><a href=\"#shortest-path\" aria-label=\"shortest path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shortest Path</h2>\n<p>최단경로를 찾는 문제의 특징은 다음과 같다.</p>\n<ul>\n<li>Input : directed graph G = (V, E) with weight function w : E -> R</li>\n<li>S에서 D까지의 minimum weight을 가지는 path를 찾는 문제이다.</li>\n<li>Weight w(p) of path p : p로 가는 길에 있는 모든 edge weight의 합이다.</li>\n<li>u부터 v 까지의 shortest-path weight은 다음으로 표현한다</li>\n<li>S(u,v) = if path가 있으면 u부터 v까지 오는 path 중의 min . 없으면 무한대</li>\n</ul>\n<h2 id=\"variants\" style=\"position:relative;\"><a href=\"#variants\" aria-label=\"variants permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variants</h2>\n<p>최단거리를 찾는 문제는 크게 4종류가 있다.</p>\n<ol>\n<li>Single-source shortest path : 하나의 S에서 모든 vertex까지 최단거리</li>\n<li>Single-destinations : 모든 vertex에서 하나의 D까지의 최단거리</li>\n<li>Single-pair : 하나의 S로 부터 모든 하나의 D까지의 최단거리</li>\n<li>All-pair : 모든 vertex의 서로간의 최단거리</li>\n</ol>\n<p>1~3번 : Bellman-Ford, DAG, Dijkstara 알고리즘\n4번 : Floyd 알고리즘</p>\n<h2 id=\"문제-특징\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%8A%B9%EC%A7%95\" aria-label=\"문제 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 특징</h2>\n<ul>\n<li>Optimal substructure이 존재한다! 그러므로 Greedy Algorithm으로 접근 가능!</li>\n<li>Negative Cycle이 존재하면 절대 안돼! 왜냐하면 그럼 그 Cycle을 계속 돌면서 음의 무한대로 값이 떨어질 것이기 때문이다!</li>\n</ul>\n<h3 id=\"shortest-path란\" style=\"position:relative;\"><a href=\"#shortest-path%EB%9E%80\" aria-label=\"shortest path란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shortest path란?</h3>\n<p>S(u,v) &#x3C;= S(u,x) + S(x, v) 이다.\n즉, 한번 거쳐가는 게 무조건 크거나 같다.</p>\n<p>Shortest path는 Cycle이 없다.</p>\n<h2 id=\"single-source-shortest-path\" style=\"position:relative;\"><a href=\"#single-source-shortest-path\" aria-label=\"single source shortest path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Source Shortest Path</h2>\n<p>먼저 하나의 Source를 가지는 문제를 풀어보자.</p>\n<ul>\n<li>1개의 s에 대해서 모든 vertex v로 가는 최단경로를 찾는 문제이다.</li>\n<li>d[v] = S[s, v]를 의미</li>\n<li>초기에 d[v]는 무한대인데 알고리즘을 돌면서 값이 줄어들 것이다.</li>\n<li>p[v] = 바로 이전 vertex를 의미한다.</li>\n<li>p를 이용해서 shortest-path tree를 만들 수 있다.</li>\n</ul>\n<p>그럼 이번에는 코드를 봐보자</p>\n<h2 id=\"초기화-코드\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0%ED%99%94-%EC%BD%94%EB%93%9C\" aria-label=\"초기화 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기화 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> each v <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> V\n        <span class=\"token keyword\">do</span> d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INFINITE\n            p<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> NIL\n    d<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>\n<p>모든 V에 있는 vertext까지의 거리를 무한대로 만들어주고 P를 초기화해준다.\n그리고 시작점인 s의 거리만 0으로 만들어준다.</p>\n<h2 id=\"relaxation짧은-길-찾기\" style=\"position:relative;\"><a href=\"#relaxation%EC%A7%A7%EC%9D%80-%EA%B8%B8-%EC%B0%BE%EA%B8%B0\" aria-label=\"relaxation짧은 길 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Relaxation(짧은 길 찾기)</h2>\n<p>이것이 사실상 핵심이다!! 더 짧은 길이 발견되면 바로 환승하는 과정이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">Relax</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> d<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">)</span>\n        then d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">;</span>\n                p<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>u는 s와 v 사이에 vertex이고 w는 u와 v 사이의 weight이다.</li>\n<li>만일 v까지 현재 최단 경로 d[v]보다 d[u]를 거치고 가는게 더 빠르면 환승한다.</li>\n</ul>\n<h2 id=\"bellman-ford-algorithm\" style=\"position:relative;\"><a href=\"#bellman-ford-algorithm\" aria-label=\"bellman ford algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bellman-Ford algorithm</h2>\n<p>이 알고리즘은 edge weight가 음수여도 할 수 있다.\n그래도 여전히 negative-weight cycle은 안돼!!</p>\n<p>일단 코드를 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">BELLMAN<span class=\"token operator\">-</span><span class=\"token function\">FORD</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1.</span>  INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span>  <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> to <span class=\"token operator\">|</span>V<span class=\"token operator\">|</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token number\">3.</span>      <span class=\"token keyword\">do</span> <span class=\"token keyword\">for</span> each <span class=\"token function\">edge</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> E\n<span class=\"token number\">4.</span>          <span class=\"token keyword\">do</span> <span class=\"token function\">RELAX</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span>\n<span class=\"token number\">5.</span>  <span class=\"token keyword\">for</span> each <span class=\"token function\">edge</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> E\n<span class=\"token number\">6.</span>      <span class=\"token keyword\">do</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> d<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">7.</span>          then <span class=\"token keyword\">return</span> FALSE\n<span class=\"token number\">8.</span>  <span class=\"token keyword\">return</span> TRUE</code></pre></div>\n<ul>\n<li>Line 1 : 초기화</li>\n<li>Line 2 : vertex 수 - 1 번 반복해</li>\n<li>Line 3,4 : edge를 하나씩 꺼내가지고 Relax시켜</li>\n<li>Line 5,6 : 또 edge에서 하나씩 꺼내서 Relax시켜봐</li>\n<li>Line 7,8 : Relax 또 되면 negative cycle이 있는거여 return False</li>\n</ul>\n<p>이 코드는 모든 E를 훑는 과정을 V-1번 반복하기 때문에 시간은 O(VE) 가 걸린다.</p>\n<h2 id=\"in-dagdirected-acycling-graph\" style=\"position:relative;\"><a href=\"#in-dagdirected-acycling-graph\" aria-label=\"in dagdirected acycling graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in DAG(Directed Acycling Graph)</h2>\n<p>사이클이 없다는 전제하에 이 알고리즘을 쓸 수 있다.\nTopological sort를 이용하면 Bellman-Ford의 V-1번 반복하는 과정을 하나로 줄일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">DAG<span class=\"token operator\">-</span>SHORTEST<span class=\"token operator\">-</span><span class=\"token function\">PATHS</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n    topologically sort the vertices\n    INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> each vertex u<span class=\"token punctuation\">,</span> take in topologically sorted order\n        <span class=\"token keyword\">do</span> <span class=\"token keyword\">for</span> each vertex v <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> Adj<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">do</span> <span class=\"token function\">RELAX</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 진행하면 타임이 O(V+E)로 확 줄게 된다!!</p>\n<p>잠깐!! 여기서 Topological Sort 뭔지 정확히 집고 넘어가자.</p>\n<h3 id=\"topological-sort\" style=\"position:relative;\"><a href=\"#topological-sort\" aria-label=\"topological sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Topological Sort</h3>\n<p>DFS를 이용해서 모든 vertex의 Finish Time을 다 구한 다음에 Finish Time이 큰 순서대로 Sorting하는 거를 말한다.</p>\n<p>옷 입는 순서와 같이 앞에 꺼가 끝나지 않으면 일이 진행되지 않을 때 일의 순서를 정하는데 사용된다.</p>\n<h2 id=\"dijkstra-algorithm다익스트라-알고리즘\" style=\"position:relative;\"><a href=\"#dijkstra-algorithm%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"dijkstra algorithm다익스트라 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dijkstra Algorithm(다익스트라 알고리즘)</h2>\n<ul>\n<li>negative edge가 없는 경우에만 사용된다.</li>\n<li>BFS를 이용해서 vertex를 priority queue(pq)에 넣고 tree를 확장해나간다.</li>\n</ul>\n<p>2개의 Vertex set이 존재해서 S는 최종, Q는 vertex가 담겨져있는 pq이다.\nQ에서 하나씩 꺼내기를 반복하면서 최단거리를 찾고 꺼낸 vertex를 S에 넣는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">DIJKSTRA</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1.</span>  INIT<span class=\"token operator\">-</span>SINGLE<span class=\"token operator\">-</span><span class=\"token function\">SOURCE</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span>  S <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token constant\">NULL</span>\n<span class=\"token number\">3.</span>  Q <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> V<span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span>\n<span class=\"token number\">4.</span>  <span class=\"token keyword\">while</span> Q <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span>\n<span class=\"token number\">5.</span>  <span class=\"token keyword\">do</span> u <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> EXTRACT<span class=\"token operator\">-</span><span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span>\n<span class=\"token number\">6.</span>      S <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> S <span class=\"token operator\">+</span> U\n<span class=\"token number\">7.</span>      <span class=\"token keyword\">for</span> each vertex v <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> Adj<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span>\n<span class=\"token number\">8.</span>          <span class=\"token keyword\">do</span> <span class=\"token function\">RELAX</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">)</span></code></pre></div>\n<p>즉, pq에서 하나씩 꺼내면서 꺼낸 vertex와 근접한 원소를 relax시켜주고 꺼낸 원소를 S에 넣는다.</p>","frontmatter":{"date":"May 09, 2019","title":"(알고리즘) Shortest Path 찾기 - Bellman-Ford, DAG, Dijkstara 알고리즘","categories":"알고리즘","author":"정진혁","emoji":"💪"},"fields":{"slug":"/shortest-path/"}},"prev":{"id":"d822db83-0adc-5c1a-b14a-53342c4416db","html":"<h2 id=\"기존-rank-활용-방법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-rank-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"기존 rank 활용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 Rank 활용 방법</h2>\n<ul>\n<li>이전 포스트에서 그림으로 표현했듯이, union과 find를 계속 진행하다보면 worst case에서는 그림과 같이 나오게 된다.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/zoomKoding/zoomKoding.github.io/source/assets/_posts/union-find-2.jpeg\" alt=\"사진\"></p>\n<ul>\n<li>그림과 같이 작은 트리가 큰 트리에 붙는 형식으로 이는 Linked List의 형태를 띄게 된다.</li>\n<li>이것의 시간 복잡도는 O(log n) 만큼 걸리게 된다.</li>\n<li>이를 <strong>union by rank</strong>라고 한다.</li>\n</ul>\n<h2 id=\"path-compression-활용-방법\" style=\"position:relative;\"><a href=\"#path-compression-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"path compression 활용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Path Compression 활용 방법</h2>\n<ul>\n<li>다른 방법이 또 있다면 <strong>path compression</strong>이다.</li>\n<li>이 방법은 find()가 호출될 때 tree를 납짝하게 만드는 것이다.</li>\n<li>find()가 x에 대해서 호출되면 x로부터 root node를 찾기 시작한다.</li>\n<li>찾아서 root node를 반환시켜준다.</li>\n<li>그리고 root node에 이어붙이기 때문에 Rank 활용 때처럼 중간에 있는 친구들을 다 search하지 않아도 된다는 장점이 있다.</li>\n</ul>\n<p><strong>Rank와 Path Compression을 활용하면 기존의 방법보다 훨씬 효율적인 코드를 짤 수 있다!</strong></p>\n<h2 id=\"rank와-path-compression-활용-코드\" style=\"position:relative;\"><a href=\"#rank%EC%99%80-path-compression-%ED%99%9C%EC%9A%A9-%EC%BD%94%EB%93%9C\" aria-label=\"rank와 path compression 활용 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rank와 Path Compression 활용 코드</h2>\n<p>이 코드는 기존 코드에 parent와 rank의 정보를 담고 있는 subset이 추가되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//각 Edge의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> src<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//각 Graph의 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span> edge<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//parent와 rank 정보가 담긴 struct이다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Graph를 생성해서 반환해주는 역할을 하는 함수이다.</span>\n<span class=\"token comment\">//V는 vertex 개수, E는 edge의 개수를 의미한다.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> V<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//그래프 공간 할당!</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 크기를 주어진 정보를 이용해 정해준다.</span>\n    graph<span class=\"token operator\">-></span>V <span class=\"token operator\">=</span> V<span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>E <span class=\"token operator\">=</span> E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//그래프의 edge 개수만큼 Edge의 공간을 할당해준다.</span>\n    graph<span class=\"token operator\">-></span>edge <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span> graph <span class=\"token operator\">-></span> E <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//만든 그래프를 반환해준다.</span>\n    <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Path compression의 장점을 활용해 root node를 찾아주는 역할을 하는 친구다.</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> subsets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//root node가 아니면 root node 찾을 때까지 recursive하세요.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span>subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span>subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//root node를 반환해주세요.</span>\n    <span class=\"token keyword\">return</span> subsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//이번에는 rank를 이용해서 합쳐준다.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> subsets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//각각 root node를 찾아줍니다.</span>\n    <span class=\"token keyword\">int</span> xroot <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> yroot <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//root node의 rank에 따라 누가 밑으로 붙을지 정합니다.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">&lt;</span> subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">)</span> subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> yroot<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">></span> subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">)</span> subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> xroot<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//두개가 같으면 x를 위로 올려주고 x의 root node rank를 하나 더해줍니다.</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        subsets<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> xroot<span class=\"token punctuation\">;</span>\n        subsets<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//Cycle을 확인해주는 함수</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> V <span class=\"token operator\">=</span> graph<span class=\"token operator\">-></span>V<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> E <span class=\"token operator\">=</span> graph<span class=\"token operator\">-></span>E<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//subset의 크기를 정해줍니다.</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span> <span class=\"token operator\">*</span>subsets <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> V <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">subset</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//초기 rank를 0으로 또 parent를 자기 자신으로 즉 자기를 rootnode로 설정한다.</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> V<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        subsets<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n        subsets<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//그래프의 Edge를 쭉 훑어봅시다.</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> E<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Edge의 src와 dest node가 같은 graph에 속해있나 봅시다.</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//같으면 Cycle이 있는겁니다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//아니면 두 그래프를 합쳐요!</span>\n        <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>subsets<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> V <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> E <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Graph</span><span class=\"token operator\">*</span> graph <span class=\"token operator\">=</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-1</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 1-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add edge 0-2</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    graph<span class=\"token operator\">-></span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dest <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isCycle</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 있어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사이클 없어요~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 과정을 통하면 log n 이 중간에 있는 노드를 더 적게 가므로 더 짧은 log n이 된다! 쉽지 않다…ㅎㅎ</p>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<ul>\n<li>진짜 조금 더 빠르게 할려는 방법을 찾는게 대박이다…</li>\n<li>이제 본격적으로 이거를 그래프 알고리즘에 써먹어봐야겠다.</li>\n</ul>","frontmatter":{"date":"May 19, 2019","title":"(알고리즘) Union Find 알고리즘 강화버전 - Rank, Path Compression 사용","categories":"알고리즘","author":"정진혁","emoji":"💪"},"fields":{"slug":"/union-find-2/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/union-find/","nextSlug":"/shortest-path/","prevSlug":"/union-find-2/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}